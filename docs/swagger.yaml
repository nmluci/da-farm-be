basePath: /api/v1
definitions:
  farms.FarmPayload:
    properties:
      name:
        example: Farm A
        type: string
    type: object
  farms.FarmResponse:
    properties:
      id:
        example: 1
        type: integer
      name:
        example: Farm A
        type: string
    type: object
  farms.ListFarmResponse:
    properties:
      farms:
        items:
          $ref: '#/definitions/farms.FarmResponse'
        type: array
      meta:
        $ref: '#/definitions/httpres.ListPagination'
    type: object
  httpres.ErrorResponse:
    properties:
      code:
        example: 404001
        type: integer
      msg:
        example: unknown
        type: string
    type: object
  httpres.ListPagination:
    properties:
      limit:
        example: 100
        type: integer
      page:
        example: 1
        type: integer
      total_page:
        example: 10
        type: integer
    type: object
  ponds.ListPondResponse:
    properties:
      meta:
        $ref: '#/definitions/httpres.ListPagination'
      ponds:
        items:
          $ref: '#/definitions/ponds.PondResponse'
        type: array
    type: object
  ponds.PondPayload:
    properties:
      name:
        example: Pond 1
        type: string
    type: object
  ponds.PondResponse:
    properties:
      farm_id:
        example: 1
        type: integer
      farm_name:
        example: Farm A
        type: string
      id:
        example: 1
        type: integer
      pond_name:
        example: Pond A
        type: string
    type: object
  telemetry.ListRequestMetricResponse:
    properties:
      request_metrics:
        items:
          $ref: '#/definitions/telemetry.RequestMetric'
        type: array
    type: object
  telemetry.RequestMetric:
    properties:
      avg_latency:
        example: 10
        type: number
      count:
        example: 25
        type: integer
      endpoint:
        example: GET /ponds
        type: string
      max_latency:
        example: 100
        type: number
      min_latency:
        example: 1
        type: number
      unique_user_agent:
        example: 5
        type: integer
    type: object
info:
  contact: {}
  description: Simple API to manage Farms and Ponds
  termsOfService: http://swagger.io/terms/
  title: DA Farm Backend
  version: "1.0"
paths:
  /farms:
    get:
      parameters:
      - description: Keyword to search
        in: query
        name: keyword
        type: string
      - description: number of entity per page
        in: query
        name: limit
        type: string
      - description: n-th page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/farms.ListFarmResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: get all farm
      tags:
      - Farm
    post:
      consumes:
      - application/json
      parameters:
      - description: farm payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/farms.FarmPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "409":
          description: farm with same name already exists
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: create a new farm
      tags:
      - Farm
  /farms/{farmID}:
    delete:
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/farms.FarmResponse'
        "404":
          description: farm not existed
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: delete specific farm by ID
      tags:
      - Farm
    get:
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/farms.FarmResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: get specific farm by ID
      tags:
      - Farm
    put:
      consumes:
      - application/json
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      - description: farm payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/farms.FarmPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: farm not existed
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "409":
          description: duplicated farm found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: update farm data
      tags:
      - Farm
  /farms/{farmID}/ponds:
    get:
      parameters:
      - description: farm ID
        in: path
        name: farmID
        required: true
        type: integer
      - description: Keyword to search
        in: query
        name: keyword
        type: string
      - description: number of entity per page
        in: query
        name: limit
        type: string
      - description: n-th page
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ponds.ListPondResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: get all pond
      tags:
      - Pond
    post:
      consumes:
      - application/json
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      - description: pond payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ponds.PondPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "409":
          description: pond with same name already exists
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: create a new pond
      tags:
      - Pond
  /farms/{farmID}/ponds/{pondID}:
    delete:
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      - description: Pond ID
        in: path
        name: pondID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ponds.PondResponse'
        "404":
          description: pond not existed
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: delete specific pond by ID
      tags:
      - Pond
    get:
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      - description: Pond ID
        in: path
        name: pondID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ponds.PondResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: get specific pond by ID
      tags:
      - Pond
    put:
      consumes:
      - application/json
      parameters:
      - description: Farm ID
        in: path
        name: farmID
        required: true
        type: integer
      - description: Pond ID
        in: path
        name: pondID
        required: true
        type: integer
      - description: pond payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ponds.PondPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: pond not existed
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "409":
          description: duplicated pond found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: update pond data
      tags:
      - Pond
  /misc/ping:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: check server status
      tags:
      - Misc
  /telemetry/request-metrics:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/telemetry.ListRequestMetricResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpres.ErrorResponse'
      summary: get request metrics for all registered API
      tags:
      - Misc
swagger: "2.0"
